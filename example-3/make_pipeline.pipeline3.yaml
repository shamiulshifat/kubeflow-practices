apiVersion: argoproj.io/v1alpha1
kind: Workflow
metadata:
  generateName: simple-text-flow-pipeline-
  annotations: {pipelines.kubeflow.org/kfp_sdk_version: 1.8.11, pipelines.kubeflow.org/pipeline_compilation_time: '2022-02-01T15:23:07.643961',
    pipelines.kubeflow.org/pipeline_spec: '{"description": "A demo pipeline for text
      print.", "inputs": [{"name": "text", "type": "String"}], "name": "simple text
      flow pipeline"}'}
  labels: {pipelines.kubeflow.org/kfp_sdk_version: 1.8.11}
spec:
  entrypoint: simple-text-flow-pipeline
  templates:
  - name: print-small-text
    container:
      args: [--text, '{{inputs.parameters.produce-one-small-output-Output}}']
      command:
      - sh
      - -ec
      - |
        program_path=$(mktemp)
        printf "%s" "$0" > "$program_path"
        python3 -u "$program_path" "$@"
      - |
        def print_small_text(text):
            '''Print small text'''
            print(text)

        import argparse
        _parser = argparse.ArgumentParser(prog='Print small text', description='Print small text')
        _parser.add_argument("--text", dest="text", type=str, required=True, default=argparse.SUPPRESS)
        _parsed_args = vars(_parser.parse_args())

        _outputs = print_small_text(**_parsed_args)
      image: python:3.7
    inputs:
      parameters:
      - {name: produce-one-small-output-Output}
    metadata:
      labels:
        pipelines.kubeflow.org/kfp_sdk_version: 1.8.11
        pipelines.kubeflow.org/pipeline-sdk-type: kfp
        pipelines.kubeflow.org/enable_caching: "true"
      annotations: {pipelines.kubeflow.org/component_spec: '{"description": "Print
          small text", "implementation": {"container": {"args": ["--text", {"inputValue":
          "text"}], "command": ["sh", "-ec", "program_path=$(mktemp)\nprintf \"%s\"
          \"$0\" > \"$program_path\"\npython3 -u \"$program_path\" \"$@\"\n", "def
          print_small_text(text):\n    ''''''Print small text''''''\n    print(text)\n\nimport
          argparse\n_parser = argparse.ArgumentParser(prog=''Print small text'', description=''Print
          small text'')\n_parser.add_argument(\"--text\", dest=\"text\", type=str,
          required=True, default=argparse.SUPPRESS)\n_parsed_args = vars(_parser.parse_args())\n\n_outputs
          = print_small_text(**_parsed_args)\n"], "image": "python:3.7"}}, "inputs":
          [{"name": "text", "type": "String"}], "name": "Print small text"}', pipelines.kubeflow.org/component_ref: '{}',
        pipelines.kubeflow.org/arguments.parameters: '{"text": "{{inputs.parameters.produce-one-small-output-Output}}"}'}
  - name: print-small-text-2
    container:
      args: [--text, '{{inputs.parameters.produce-one-small-output-Output}}']
      command:
      - sh
      - -ec
      - |
        program_path=$(mktemp)
        printf "%s" "$0" > "$program_path"
        python3 -u "$program_path" "$@"
      - |
        def print_small_text(text):
            '''Print small text'''
            print(text)

        import argparse
        _parser = argparse.ArgumentParser(prog='Print small text', description='Print small text')
        _parser.add_argument("--text", dest="text", type=str, required=True, default=argparse.SUPPRESS)
        _parsed_args = vars(_parser.parse_args())

        _outputs = print_small_text(**_parsed_args)
      image: python:3.7
    inputs:
      parameters:
      - {name: produce-one-small-output-Output}
    metadata:
      labels:
        pipelines.kubeflow.org/kfp_sdk_version: 1.8.11
        pipelines.kubeflow.org/pipeline-sdk-type: kfp
        pipelines.kubeflow.org/enable_caching: "true"
      annotations: {pipelines.kubeflow.org/component_spec: '{"description": "Print
          small text", "implementation": {"container": {"args": ["--text", {"inputValue":
          "text"}], "command": ["sh", "-ec", "program_path=$(mktemp)\nprintf \"%s\"
          \"$0\" > \"$program_path\"\npython3 -u \"$program_path\" \"$@\"\n", "def
          print_small_text(text):\n    ''''''Print small text''''''\n    print(text)\n\nimport
          argparse\n_parser = argparse.ArgumentParser(prog=''Print small text'', description=''Print
          small text'')\n_parser.add_argument(\"--text\", dest=\"text\", type=str,
          required=True, default=argparse.SUPPRESS)\n_parsed_args = vars(_parser.parse_args())\n\n_outputs
          = print_small_text(**_parsed_args)\n"], "image": "python:3.7"}}, "inputs":
          [{"name": "text", "type": "String"}], "name": "Print small text"}', pipelines.kubeflow.org/component_ref: '{}',
        pipelines.kubeflow.org/arguments.parameters: '{"text": "{{inputs.parameters.produce-one-small-output-Output}}"}'}
  - name: produce-one-small-output
    container:
      args: [--text, '{{inputs.parameters.text}}', '----output-paths', /tmp/outputs/Output/data]
      command:
      - sh
      - -ec
      - |
        program_path=$(mktemp)
        printf "%s" "$0" > "$program_path"
        python3 -u "$program_path" "$@"
      - |
        def produce_one_small_output(text):
            return text

        def _serialize_str(str_value: str) -> str:
            if not isinstance(str_value, str):
                raise TypeError('Value "{}" has type "{}" instead of str.'.format(
                    str(str_value), str(type(str_value))))
            return str_value

        import argparse
        _parser = argparse.ArgumentParser(prog='Produce one small output', description='')
        _parser.add_argument("--text", dest="text", type=str, required=True, default=argparse.SUPPRESS)
        _parser.add_argument("----output-paths", dest="_output_paths", type=str, nargs=1)
        _parsed_args = vars(_parser.parse_args())
        _output_files = _parsed_args.pop("_output_paths", [])

        _outputs = produce_one_small_output(**_parsed_args)

        _outputs = [_outputs]

        _output_serializers = [
            _serialize_str,

        ]

        import os
        for idx, output_file in enumerate(_output_files):
            try:
                os.makedirs(os.path.dirname(output_file))
            except OSError:
                pass
            with open(output_file, 'w') as f:
                f.write(_output_serializers[idx](_outputs[idx]))
      image: python:3.7
    inputs:
      parameters:
      - {name: text}
    outputs:
      parameters:
      - name: produce-one-small-output-Output
        valueFrom: {path: /tmp/outputs/Output/data}
      artifacts:
      - {name: produce-one-small-output-Output, path: /tmp/outputs/Output/data}
    metadata:
      labels:
        pipelines.kubeflow.org/kfp_sdk_version: 1.8.11
        pipelines.kubeflow.org/pipeline-sdk-type: kfp
        pipelines.kubeflow.org/enable_caching: "true"
      annotations: {pipelines.kubeflow.org/component_spec: '{"implementation": {"container":
          {"args": ["--text", {"inputValue": "text"}, "----output-paths", {"outputPath":
          "Output"}], "command": ["sh", "-ec", "program_path=$(mktemp)\nprintf \"%s\"
          \"$0\" > \"$program_path\"\npython3 -u \"$program_path\" \"$@\"\n", "def
          produce_one_small_output(text):\n    return text\n\ndef _serialize_str(str_value:
          str) -> str:\n    if not isinstance(str_value, str):\n        raise TypeError(''Value
          \"{}\" has type \"{}\" instead of str.''.format(\n            str(str_value),
          str(type(str_value))))\n    return str_value\n\nimport argparse\n_parser
          = argparse.ArgumentParser(prog=''Produce one small output'', description='''')\n_parser.add_argument(\"--text\",
          dest=\"text\", type=str, required=True, default=argparse.SUPPRESS)\n_parser.add_argument(\"----output-paths\",
          dest=\"_output_paths\", type=str, nargs=1)\n_parsed_args = vars(_parser.parse_args())\n_output_files
          = _parsed_args.pop(\"_output_paths\", [])\n\n_outputs = produce_one_small_output(**_parsed_args)\n\n_outputs
          = [_outputs]\n\n_output_serializers = [\n    _serialize_str,\n\n]\n\nimport
          os\nfor idx, output_file in enumerate(_output_files):\n    try:\n        os.makedirs(os.path.dirname(output_file))\n    except
          OSError:\n        pass\n    with open(output_file, ''w'') as f:\n        f.write(_output_serializers[idx](_outputs[idx]))\n"],
          "image": "python:3.7"}}, "inputs": [{"name": "text", "type": "String"}],
          "name": "Produce one small output", "outputs": [{"name": "Output", "type":
          "String"}]}', pipelines.kubeflow.org/component_ref: '{}', pipelines.kubeflow.org/arguments.parameters: '{"text":
          "{{inputs.parameters.text}}"}'}
  - name: save-text
    container:
      args: [--text, '{{inputs.parameters.produce-one-small-output-Output}}']
      command:
      - sh
      - -ec
      - |
        program_path=$(mktemp)
        printf "%s" "$0" > "$program_path"
        python3 -u "$program_path" "$@"
      - |
        def save_text(text):
            data=open("textdata.txt", "w")
            temp=data.write(text)
            data.close()
            print(temp)

        import argparse
        _parser = argparse.ArgumentParser(prog='Save text', description='')
        _parser.add_argument("--text", dest="text", type=str, required=True, default=argparse.SUPPRESS)
        _parsed_args = vars(_parser.parse_args())

        _outputs = save_text(**_parsed_args)
      image: python:3.7
    inputs:
      parameters:
      - {name: produce-one-small-output-Output}
    metadata:
      labels:
        pipelines.kubeflow.org/kfp_sdk_version: 1.8.11
        pipelines.kubeflow.org/pipeline-sdk-type: kfp
        pipelines.kubeflow.org/enable_caching: "true"
      annotations: {pipelines.kubeflow.org/component_spec: '{"implementation": {"container":
          {"args": ["--text", {"inputValue": "text"}], "command": ["sh", "-ec", "program_path=$(mktemp)\nprintf
          \"%s\" \"$0\" > \"$program_path\"\npython3 -u \"$program_path\" \"$@\"\n",
          "def save_text(text):\n    data=open(\"textdata.txt\", \"w\")\n    temp=data.write(text)\n    data.close()\n    print(temp)\n\nimport
          argparse\n_parser = argparse.ArgumentParser(prog=''Save text'', description='''')\n_parser.add_argument(\"--text\",
          dest=\"text\", type=str, required=True, default=argparse.SUPPRESS)\n_parsed_args
          = vars(_parser.parse_args())\n\n_outputs = save_text(**_parsed_args)\n"],
          "image": "python:3.7"}}, "inputs": [{"name": "text", "type": "String"}],
          "name": "Save text"}', pipelines.kubeflow.org/component_ref: '{}', pipelines.kubeflow.org/arguments.parameters: '{"text":
          "{{inputs.parameters.produce-one-small-output-Output}}"}'}
  - name: simple-text-flow-pipeline
    inputs:
      parameters:
      - {name: text}
    dag:
      tasks:
      - name: print-small-text
        template: print-small-text
        dependencies: [produce-one-small-output]
        arguments:
          parameters:
          - {name: produce-one-small-output-Output, value: '{{tasks.produce-one-small-output.outputs.parameters.produce-one-small-output-Output}}'}
      - name: print-small-text-2
        template: print-small-text-2
        dependencies: [produce-one-small-output]
        arguments:
          parameters:
          - {name: produce-one-small-output-Output, value: '{{tasks.produce-one-small-output.outputs.parameters.produce-one-small-output-Output}}'}
      - name: produce-one-small-output
        template: produce-one-small-output
        arguments:
          parameters:
          - {name: text, value: '{{inputs.parameters.text}}'}
      - name: save-text
        template: save-text
        dependencies: [produce-one-small-output]
        arguments:
          parameters:
          - {name: produce-one-small-output-Output, value: '{{tasks.produce-one-small-output.outputs.parameters.produce-one-small-output-Output}}'}
  arguments:
    parameters:
    - {name: text}
  serviceAccountName: pipeline-runner

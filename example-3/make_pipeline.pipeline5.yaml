apiVersion: argoproj.io/v1alpha1
kind: Workflow
metadata:
  generateName: bigger-files-i-o-pipeline-
  annotations: {pipelines.kubeflow.org/kfp_sdk_version: 1.8.11, pipelines.kubeflow.org/pipeline_compilation_time: '2022-02-01T20:32:20.798354',
    pipelines.kubeflow.org/pipeline_spec: '{"description": "A demo pipeline for handling
      bigger I/O.", "name": "Bigger files I/O pipeline"}'}
  labels: {pipelines.kubeflow.org/kfp_sdk_version: 1.8.11}
spec:
  entrypoint: bigger-files-i-o-pipeline
  templates:
  - name: bigger-files-i-o-pipeline
    dag:
      tasks:
      - name: print-text
        template: print-text
        dependencies: [repeat-line]
        arguments:
          artifacts:
          - {name: repeat-line-output_text, from: '{{tasks.repeat-line.outputs.artifacts.repeat-line-output_text}}'}
      - name: print-text-2
        template: print-text-2
        dependencies: [split-text-lines]
        arguments:
          artifacts:
          - {name: split-text-lines-odd_lines, from: '{{tasks.split-text-lines.outputs.artifacts.split-text-lines-odd_lines}}'}
      - name: print-text-3
        template: print-text-3
        dependencies: [split-text-lines]
        arguments:
          artifacts:
          - {name: split-text-lines-even_lines, from: '{{tasks.split-text-lines.outputs.artifacts.split-text-lines-even_lines}}'}
      - name: print-text-4
        template: print-text-4
        dependencies: [split-text-lines2]
        arguments:
          artifacts:
          - {name: split-text-lines2-odd_lines, from: '{{tasks.split-text-lines2.outputs.artifacts.split-text-lines2-odd_lines}}'}
      - name: print-text-5
        template: print-text-5
        dependencies: [split-text-lines2]
        arguments:
          artifacts:
          - {name: split-text-lines2-even_lines, from: '{{tasks.split-text-lines2.outputs.artifacts.split-text-lines2-even_lines}}'}
      - {name: repeat-line, template: repeat-line}
      - {name: split-text-lines, template: split-text-lines}
      - {name: split-text-lines2, template: split-text-lines2}
  - name: print-text
    container:
      args: [--text, /tmp/inputs/text/data]
      command:
      - sh
      - -ec
      - |
        program_path=$(mktemp)
        printf "%s" "$0" > "$program_path"
        python3 -u "$program_path" "$@"
      - |
        def print_text(text_path): # The "text" input is untyped so that any data can be printed
            '''Print text'''
            with open(text_path, 'r') as reader:
                for line in reader:
                    print(line, end = '')

        import argparse
        _parser = argparse.ArgumentParser(prog='Print text', description='Print text')
        _parser.add_argument("--text", dest="text_path", type=str, required=True, default=argparse.SUPPRESS)
        _parsed_args = vars(_parser.parse_args())

        _outputs = print_text(**_parsed_args)
      image: python:3.7
    inputs:
      artifacts:
      - {name: repeat-line-output_text, path: /tmp/inputs/text/data}
    metadata:
      labels:
        pipelines.kubeflow.org/kfp_sdk_version: 1.8.11
        pipelines.kubeflow.org/pipeline-sdk-type: kfp
        pipelines.kubeflow.org/enable_caching: "true"
      annotations: {pipelines.kubeflow.org/component_spec: '{"description": "Print
          text", "implementation": {"container": {"args": ["--text", {"inputPath":
          "text"}], "command": ["sh", "-ec", "program_path=$(mktemp)\nprintf \"%s\"
          \"$0\" > \"$program_path\"\npython3 -u \"$program_path\" \"$@\"\n", "def
          print_text(text_path): # The \"text\" input is untyped so that any data
          can be printed\n    ''''''Print text''''''\n    with open(text_path, ''r'')
          as reader:\n        for line in reader:\n            print(line, end = '''')\n\nimport
          argparse\n_parser = argparse.ArgumentParser(prog=''Print text'', description=''Print
          text'')\n_parser.add_argument(\"--text\", dest=\"text_path\", type=str,
          required=True, default=argparse.SUPPRESS)\n_parsed_args = vars(_parser.parse_args())\n\n_outputs
          = print_text(**_parsed_args)\n"], "image": "python:3.7"}}, "inputs": [{"name":
          "text"}], "name": "Print text"}', pipelines.kubeflow.org/component_ref: '{}'}
  - name: print-text-2
    container:
      args: [--text, /tmp/inputs/text/data]
      command:
      - sh
      - -ec
      - |
        program_path=$(mktemp)
        printf "%s" "$0" > "$program_path"
        python3 -u "$program_path" "$@"
      - |
        def print_text(text_path): # The "text" input is untyped so that any data can be printed
            '''Print text'''
            with open(text_path, 'r') as reader:
                for line in reader:
                    print(line, end = '')

        import argparse
        _parser = argparse.ArgumentParser(prog='Print text', description='Print text')
        _parser.add_argument("--text", dest="text_path", type=str, required=True, default=argparse.SUPPRESS)
        _parsed_args = vars(_parser.parse_args())

        _outputs = print_text(**_parsed_args)
      image: python:3.7
    inputs:
      artifacts:
      - {name: split-text-lines-odd_lines, path: /tmp/inputs/text/data}
    metadata:
      labels:
        pipelines.kubeflow.org/kfp_sdk_version: 1.8.11
        pipelines.kubeflow.org/pipeline-sdk-type: kfp
        pipelines.kubeflow.org/enable_caching: "true"
      annotations: {pipelines.kubeflow.org/component_spec: '{"description": "Print
          text", "implementation": {"container": {"args": ["--text", {"inputPath":
          "text"}], "command": ["sh", "-ec", "program_path=$(mktemp)\nprintf \"%s\"
          \"$0\" > \"$program_path\"\npython3 -u \"$program_path\" \"$@\"\n", "def
          print_text(text_path): # The \"text\" input is untyped so that any data
          can be printed\n    ''''''Print text''''''\n    with open(text_path, ''r'')
          as reader:\n        for line in reader:\n            print(line, end = '''')\n\nimport
          argparse\n_parser = argparse.ArgumentParser(prog=''Print text'', description=''Print
          text'')\n_parser.add_argument(\"--text\", dest=\"text_path\", type=str,
          required=True, default=argparse.SUPPRESS)\n_parsed_args = vars(_parser.parse_args())\n\n_outputs
          = print_text(**_parsed_args)\n"], "image": "python:3.7"}}, "inputs": [{"name":
          "text"}], "name": "Print text"}', pipelines.kubeflow.org/component_ref: '{}'}
  - name: print-text-3
    container:
      args: [--text, /tmp/inputs/text/data]
      command:
      - sh
      - -ec
      - |
        program_path=$(mktemp)
        printf "%s" "$0" > "$program_path"
        python3 -u "$program_path" "$@"
      - |
        def print_text(text_path): # The "text" input is untyped so that any data can be printed
            '''Print text'''
            with open(text_path, 'r') as reader:
                for line in reader:
                    print(line, end = '')

        import argparse
        _parser = argparse.ArgumentParser(prog='Print text', description='Print text')
        _parser.add_argument("--text", dest="text_path", type=str, required=True, default=argparse.SUPPRESS)
        _parsed_args = vars(_parser.parse_args())

        _outputs = print_text(**_parsed_args)
      image: python:3.7
    inputs:
      artifacts:
      - {name: split-text-lines-even_lines, path: /tmp/inputs/text/data}
    metadata:
      labels:
        pipelines.kubeflow.org/kfp_sdk_version: 1.8.11
        pipelines.kubeflow.org/pipeline-sdk-type: kfp
        pipelines.kubeflow.org/enable_caching: "true"
      annotations: {pipelines.kubeflow.org/component_spec: '{"description": "Print
          text", "implementation": {"container": {"args": ["--text", {"inputPath":
          "text"}], "command": ["sh", "-ec", "program_path=$(mktemp)\nprintf \"%s\"
          \"$0\" > \"$program_path\"\npython3 -u \"$program_path\" \"$@\"\n", "def
          print_text(text_path): # The \"text\" input is untyped so that any data
          can be printed\n    ''''''Print text''''''\n    with open(text_path, ''r'')
          as reader:\n        for line in reader:\n            print(line, end = '''')\n\nimport
          argparse\n_parser = argparse.ArgumentParser(prog=''Print text'', description=''Print
          text'')\n_parser.add_argument(\"--text\", dest=\"text_path\", type=str,
          required=True, default=argparse.SUPPRESS)\n_parsed_args = vars(_parser.parse_args())\n\n_outputs
          = print_text(**_parsed_args)\n"], "image": "python:3.7"}}, "inputs": [{"name":
          "text"}], "name": "Print text"}', pipelines.kubeflow.org/component_ref: '{}'}
  - name: print-text-4
    container:
      args: [--text, /tmp/inputs/text/data]
      command:
      - sh
      - -ec
      - |
        program_path=$(mktemp)
        printf "%s" "$0" > "$program_path"
        python3 -u "$program_path" "$@"
      - |
        def print_text(text_path): # The "text" input is untyped so that any data can be printed
            '''Print text'''
            with open(text_path, 'r') as reader:
                for line in reader:
                    print(line, end = '')

        import argparse
        _parser = argparse.ArgumentParser(prog='Print text', description='Print text')
        _parser.add_argument("--text", dest="text_path", type=str, required=True, default=argparse.SUPPRESS)
        _parsed_args = vars(_parser.parse_args())

        _outputs = print_text(**_parsed_args)
      image: python:3.7
    inputs:
      artifacts:
      - {name: split-text-lines2-odd_lines, path: /tmp/inputs/text/data}
    metadata:
      annotations: {pipelines.kubeflow.org/task_display_name: Odd lines, pipelines.kubeflow.org/component_spec: '{"description":
          "Print text", "implementation": {"container": {"args": ["--text", {"inputPath":
          "text"}], "command": ["sh", "-ec", "program_path=$(mktemp)\nprintf \"%s\"
          \"$0\" > \"$program_path\"\npython3 -u \"$program_path\" \"$@\"\n", "def
          print_text(text_path): # The \"text\" input is untyped so that any data
          can be printed\n    ''''''Print text''''''\n    with open(text_path, ''r'')
          as reader:\n        for line in reader:\n            print(line, end = '''')\n\nimport
          argparse\n_parser = argparse.ArgumentParser(prog=''Print text'', description=''Print
          text'')\n_parser.add_argument(\"--text\", dest=\"text_path\", type=str,
          required=True, default=argparse.SUPPRESS)\n_parsed_args = vars(_parser.parse_args())\n\n_outputs
          = print_text(**_parsed_args)\n"], "image": "python:3.7"}}, "inputs": [{"name":
          "text"}], "name": "Print text"}', pipelines.kubeflow.org/component_ref: '{}'}
      labels:
        pipelines.kubeflow.org/kfp_sdk_version: 1.8.11
        pipelines.kubeflow.org/pipeline-sdk-type: kfp
        pipelines.kubeflow.org/enable_caching: "true"
  - name: print-text-5
    container:
      args: [--text, /tmp/inputs/text/data]
      command:
      - sh
      - -ec
      - |
        program_path=$(mktemp)
        printf "%s" "$0" > "$program_path"
        python3 -u "$program_path" "$@"
      - |
        def print_text(text_path): # The "text" input is untyped so that any data can be printed
            '''Print text'''
            with open(text_path, 'r') as reader:
                for line in reader:
                    print(line, end = '')

        import argparse
        _parser = argparse.ArgumentParser(prog='Print text', description='Print text')
        _parser.add_argument("--text", dest="text_path", type=str, required=True, default=argparse.SUPPRESS)
        _parsed_args = vars(_parser.parse_args())

        _outputs = print_text(**_parsed_args)
      image: python:3.7
    inputs:
      artifacts:
      - {name: split-text-lines2-even_lines, path: /tmp/inputs/text/data}
    metadata:
      annotations: {pipelines.kubeflow.org/task_display_name: Even lines, pipelines.kubeflow.org/component_spec: '{"description":
          "Print text", "implementation": {"container": {"args": ["--text", {"inputPath":
          "text"}], "command": ["sh", "-ec", "program_path=$(mktemp)\nprintf \"%s\"
          \"$0\" > \"$program_path\"\npython3 -u \"$program_path\" \"$@\"\n", "def
          print_text(text_path): # The \"text\" input is untyped so that any data
          can be printed\n    ''''''Print text''''''\n    with open(text_path, ''r'')
          as reader:\n        for line in reader:\n            print(line, end = '''')\n\nimport
          argparse\n_parser = argparse.ArgumentParser(prog=''Print text'', description=''Print
          text'')\n_parser.add_argument(\"--text\", dest=\"text_path\", type=str,
          required=True, default=argparse.SUPPRESS)\n_parsed_args = vars(_parser.parse_args())\n\n_outputs
          = print_text(**_parsed_args)\n"], "image": "python:3.7"}}, "inputs": [{"name":
          "text"}], "name": "Print text"}', pipelines.kubeflow.org/component_ref: '{}'}
      labels:
        pipelines.kubeflow.org/kfp_sdk_version: 1.8.11
        pipelines.kubeflow.org/pipeline-sdk-type: kfp
        pipelines.kubeflow.org/enable_caching: "true"
  - name: repeat-line
    container:
      args: [--line, Hello, --count, '5000', --output-text, /tmp/outputs/output_text/data]
      command:
      - sh
      - -ec
      - |
        program_path=$(mktemp)
        printf "%s" "$0" > "$program_path"
        python3 -u "$program_path" "$@"
      - |
        def _make_parent_dirs_and_return_path(file_path: str):
            import os
            os.makedirs(os.path.dirname(file_path), exist_ok=True)
            return file_path

        def repeat_line(line, output_text_path, count = 10):
            '''Repeat the line specified number of times'''
            with open(output_text_path, 'w') as writer:
                for i in range(count):
                    writer.write(line + '\n')

        import argparse
        _parser = argparse.ArgumentParser(prog='Repeat line', description='Repeat the line specified number of times')
        _parser.add_argument("--line", dest="line", type=str, required=True, default=argparse.SUPPRESS)
        _parser.add_argument("--count", dest="count", type=int, required=False, default=argparse.SUPPRESS)
        _parser.add_argument("--output-text", dest="output_text_path", type=_make_parent_dirs_and_return_path, required=True, default=argparse.SUPPRESS)
        _parsed_args = vars(_parser.parse_args())

        _outputs = repeat_line(**_parsed_args)
      image: python:3.7
    outputs:
      artifacts:
      - {name: repeat-line-output_text, path: /tmp/outputs/output_text/data}
    metadata:
      labels:
        pipelines.kubeflow.org/kfp_sdk_version: 1.8.11
        pipelines.kubeflow.org/pipeline-sdk-type: kfp
        pipelines.kubeflow.org/enable_caching: "true"
      annotations: {pipelines.kubeflow.org/component_spec: '{"description": "Repeat
          the line specified number of times", "implementation": {"container": {"args":
          ["--line", {"inputValue": "line"}, {"if": {"cond": {"isPresent": "count"},
          "then": ["--count", {"inputValue": "count"}]}}, "--output-text", {"outputPath":
          "output_text"}], "command": ["sh", "-ec", "program_path=$(mktemp)\nprintf
          \"%s\" \"$0\" > \"$program_path\"\npython3 -u \"$program_path\" \"$@\"\n",
          "def _make_parent_dirs_and_return_path(file_path: str):\n    import os\n    os.makedirs(os.path.dirname(file_path),
          exist_ok=True)\n    return file_path\n\ndef repeat_line(line, output_text_path,
          count = 10):\n    ''''''Repeat the line specified number of times''''''\n    with
          open(output_text_path, ''w'') as writer:\n        for i in range(count):\n            writer.write(line
          + ''\\n'')\n\nimport argparse\n_parser = argparse.ArgumentParser(prog=''Repeat
          line'', description=''Repeat the line specified number of times'')\n_parser.add_argument(\"--line\",
          dest=\"line\", type=str, required=True, default=argparse.SUPPRESS)\n_parser.add_argument(\"--count\",
          dest=\"count\", type=int, required=False, default=argparse.SUPPRESS)\n_parser.add_argument(\"--output-text\",
          dest=\"output_text_path\", type=_make_parent_dirs_and_return_path, required=True,
          default=argparse.SUPPRESS)\n_parsed_args = vars(_parser.parse_args())\n\n_outputs
          = repeat_line(**_parsed_args)\n"], "image": "python:3.7"}}, "inputs": [{"name":
          "line", "type": "String"}, {"default": "10", "name": "count", "optional":
          true, "type": "Integer"}], "name": "Repeat line", "outputs": [{"name": "output_text",
          "type": "String"}]}', pipelines.kubeflow.org/component_ref: '{}', pipelines.kubeflow.org/arguments.parameters: '{"count":
          "5000", "line": "Hello"}'}
  - name: split-text-lines
    container:
      args: [--source, /tmp/inputs/source/data, --odd-lines, /tmp/outputs/odd_lines/data,
        --even-lines, /tmp/outputs/even_lines/data]
      command:
      - sh
      - -ec
      - |
        program_path=$(mktemp)
        printf "%s" "$0" > "$program_path"
        python3 -u "$program_path" "$@"
      - |
        def _make_parent_dirs_and_return_path(file_path: str):
            import os
            os.makedirs(os.path.dirname(file_path), exist_ok=True)
            return file_path

        def split_text_lines(source_path, odd_lines_path, even_lines_path):
            with open(source_path, 'r') as reader:
                with open(odd_lines_path, 'w') as odd_writer:
                    with open(even_lines_path, 'w') as even_writer:
                        while True:
                            line = reader.readline()
                            if line == "":
                                break
                            odd_writer.write(line)
                            line = reader.readline()
                            if line == "":
                                break
                            even_writer.write(line)

        import argparse
        _parser = argparse.ArgumentParser(prog='Split text lines', description='')
        _parser.add_argument("--source", dest="source_path", type=str, required=True, default=argparse.SUPPRESS)
        _parser.add_argument("--odd-lines", dest="odd_lines_path", type=_make_parent_dirs_and_return_path, required=True, default=argparse.SUPPRESS)
        _parser.add_argument("--even-lines", dest="even_lines_path", type=_make_parent_dirs_and_return_path, required=True, default=argparse.SUPPRESS)
        _parsed_args = vars(_parser.parse_args())

        _outputs = split_text_lines(**_parsed_args)
      image: python:3.7
    inputs:
      artifacts:
      - name: source
        path: /tmp/inputs/source/data
        raw:
          data: |-
            one
            two
            three
            four
            five
            six
            seven
            eight
            nine
            ten
    outputs:
      artifacts:
      - {name: split-text-lines-even_lines, path: /tmp/outputs/even_lines/data}
      - {name: split-text-lines-odd_lines, path: /tmp/outputs/odd_lines/data}
    metadata:
      labels:
        pipelines.kubeflow.org/kfp_sdk_version: 1.8.11
        pipelines.kubeflow.org/pipeline-sdk-type: kfp
        pipelines.kubeflow.org/enable_caching: "true"
      annotations: {pipelines.kubeflow.org/component_spec: '{"implementation": {"container":
          {"args": ["--source", {"inputPath": "source"}, "--odd-lines", {"outputPath":
          "odd_lines"}, "--even-lines", {"outputPath": "even_lines"}], "command":
          ["sh", "-ec", "program_path=$(mktemp)\nprintf \"%s\" \"$0\" > \"$program_path\"\npython3
          -u \"$program_path\" \"$@\"\n", "def _make_parent_dirs_and_return_path(file_path:
          str):\n    import os\n    os.makedirs(os.path.dirname(file_path), exist_ok=True)\n    return
          file_path\n\ndef split_text_lines(source_path, odd_lines_path, even_lines_path):\n    with
          open(source_path, ''r'') as reader:\n        with open(odd_lines_path, ''w'')
          as odd_writer:\n            with open(even_lines_path, ''w'') as even_writer:\n                while
          True:\n                    line = reader.readline()\n                    if
          line == \"\":\n                        break\n                    odd_writer.write(line)\n                    line
          = reader.readline()\n                    if line == \"\":\n                        break\n                    even_writer.write(line)\n\nimport
          argparse\n_parser = argparse.ArgumentParser(prog=''Split text lines'', description='''')\n_parser.add_argument(\"--source\",
          dest=\"source_path\", type=str, required=True, default=argparse.SUPPRESS)\n_parser.add_argument(\"--odd-lines\",
          dest=\"odd_lines_path\", type=_make_parent_dirs_and_return_path, required=True,
          default=argparse.SUPPRESS)\n_parser.add_argument(\"--even-lines\", dest=\"even_lines_path\",
          type=_make_parent_dirs_and_return_path, required=True, default=argparse.SUPPRESS)\n_parsed_args
          = vars(_parser.parse_args())\n\n_outputs = split_text_lines(**_parsed_args)\n"],
          "image": "python:3.7"}}, "inputs": [{"name": "source", "type": "String"}],
          "name": "Split text lines", "outputs": [{"name": "odd_lines", "type": "String"},
          {"name": "even_lines", "type": "String"}]}', pipelines.kubeflow.org/component_ref: '{}'}
  - name: split-text-lines2
    container:
      args: [--source, /tmp/inputs/source/data, --odd-lines, /tmp/outputs/odd_lines/data,
        --even-lines, /tmp/outputs/even_lines/data]
      command:
      - sh
      - -ec
      - |
        program_path=$(mktemp)
        printf "%s" "$0" > "$program_path"
        python3 -u "$program_path" "$@"
      - |
        def _parent_dirs_maker_that_returns_open_file(mode: str, encoding: str = None):

            def make_parent_dirs_and_return_path(file_path: str):
                import os
                os.makedirs(os.path.dirname(file_path), exist_ok=True)
                return open(file_path, mode=mode, encoding=encoding)

            return make_parent_dirs_and_return_path

        def split_text_lines2(source_file, odd_lines_file, even_lines_file):
            while True:
                line = source_file.readline()
                if line == "":
                    break
                odd_lines_file.write(line)
                line = source_file.readline()
                if line == "":
                    break
                even_lines_file.write(line)

        import argparse
        _parser = argparse.ArgumentParser(prog='Split text lines2', description='')
        _parser.add_argument("--source", dest="source_file", type=argparse.FileType('rt'), required=True, default=argparse.SUPPRESS)
        _parser.add_argument("--odd-lines", dest="odd_lines_file", type=_parent_dirs_maker_that_returns_open_file('wt'), required=True, default=argparse.SUPPRESS)
        _parser.add_argument("--even-lines", dest="even_lines_file", type=_parent_dirs_maker_that_returns_open_file('wt'), required=True, default=argparse.SUPPRESS)
        _parsed_args = vars(_parser.parse_args())

        _outputs = split_text_lines2(**_parsed_args)
      image: python:3.7
    inputs:
      artifacts:
      - name: source
        path: /tmp/inputs/source/data
        raw:
          data: |-
            one
            two
            three
            four
            five
            six
            seven
            eight
            nine
            ten
    outputs:
      artifacts:
      - {name: split-text-lines2-even_lines, path: /tmp/outputs/even_lines/data}
      - {name: split-text-lines2-odd_lines, path: /tmp/outputs/odd_lines/data}
    metadata:
      labels:
        pipelines.kubeflow.org/kfp_sdk_version: 1.8.11
        pipelines.kubeflow.org/pipeline-sdk-type: kfp
        pipelines.kubeflow.org/enable_caching: "true"
      annotations: {pipelines.kubeflow.org/component_spec: '{"implementation": {"container":
          {"args": ["--source", {"inputPath": "source"}, "--odd-lines", {"outputPath":
          "odd_lines"}, "--even-lines", {"outputPath": "even_lines"}], "command":
          ["sh", "-ec", "program_path=$(mktemp)\nprintf \"%s\" \"$0\" > \"$program_path\"\npython3
          -u \"$program_path\" \"$@\"\n", "def _parent_dirs_maker_that_returns_open_file(mode:
          str, encoding: str = None):\n\n    def make_parent_dirs_and_return_path(file_path:
          str):\n        import os\n        os.makedirs(os.path.dirname(file_path),
          exist_ok=True)\n        return open(file_path, mode=mode, encoding=encoding)\n\n    return
          make_parent_dirs_and_return_path\n\ndef split_text_lines2(source_file, odd_lines_file,
          even_lines_file):\n    while True:\n        line = source_file.readline()\n        if
          line == \"\":\n            break\n        odd_lines_file.write(line)\n        line
          = source_file.readline()\n        if line == \"\":\n            break\n        even_lines_file.write(line)\n\nimport
          argparse\n_parser = argparse.ArgumentParser(prog=''Split text lines2'',
          description='''')\n_parser.add_argument(\"--source\", dest=\"source_file\",
          type=argparse.FileType(''rt''), required=True, default=argparse.SUPPRESS)\n_parser.add_argument(\"--odd-lines\",
          dest=\"odd_lines_file\", type=_parent_dirs_maker_that_returns_open_file(''wt''),
          required=True, default=argparse.SUPPRESS)\n_parser.add_argument(\"--even-lines\",
          dest=\"even_lines_file\", type=_parent_dirs_maker_that_returns_open_file(''wt''),
          required=True, default=argparse.SUPPRESS)\n_parsed_args = vars(_parser.parse_args())\n\n_outputs
          = split_text_lines2(**_parsed_args)\n"], "image": "python:3.7"}}, "inputs":
          [{"name": "source", "type": "String"}], "name": "Split text lines2", "outputs":
          [{"name": "odd_lines", "type": "String"}, {"name": "even_lines", "type":
          "String"}]}', pipelines.kubeflow.org/component_ref: '{}'}
  arguments:
    parameters: []
  serviceAccountName: pipeline-runner

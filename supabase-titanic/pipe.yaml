apiVersion: argoproj.io/v1alpha1
kind: Workflow
metadata:
  generateName: pipeline-
  annotations: {pipelines.kubeflow.org/kfp_sdk_version: 1.8.11, pipelines.kubeflow.org/pipeline_compilation_time: '2022-03-03T12:40:33.318598',
    pipelines.kubeflow.org/pipeline_spec: '{"inputs": [{"name": "param", "type": "Integer"}],
      "name": "pipeline"}'}
  labels: {pipelines.kubeflow.org/kfp_sdk_version: 1.8.11}
  namespace: argo
spec:
  entrypoint: pipeline
  templates:
  - name: for-loop-1
    inputs:
      parameters:
      - {name: list-func-Output-loop-item}
    dag:
      tasks:
      - name: print-func
        template: print-func
        arguments:
          parameters:
          - {name: list-func-Output-loop-item, value: '{{inputs.parameters.list-func-Output-loop-item}}'}
  - name: list-func
    container:
      args: [--param, '{{inputs.parameters.param}}', '----output-paths', /tmp/outputs/Output/data]
      command:
      - sh
      - -ec
      - |
        program_path=$(mktemp)
        printf "%s" "$0" > "$program_path"
        python3 -u "$program_path" "$@"
      - |
        def list_func(param):
          return list(range(param))

        def _serialize_json(obj) -> str:
            if isinstance(obj, str):
                return obj
            import json

            def default_serializer(obj):
                if hasattr(obj, 'to_struct'):
                    return obj.to_struct()
                else:
                    raise TypeError(
                        "Object of type '%s' is not JSON serializable and does not have .to_struct() method."
                        % obj.__class__.__name__)

            return json.dumps(obj, default=default_serializer, sort_keys=True)

        import argparse
        _parser = argparse.ArgumentParser(prog='List func', description='')
        _parser.add_argument("--param", dest="param", type=int, required=True, default=argparse.SUPPRESS)
        _parser.add_argument("----output-paths", dest="_output_paths", type=str, nargs=1)
        _parsed_args = vars(_parser.parse_args())
        _output_files = _parsed_args.pop("_output_paths", [])

        _outputs = list_func(**_parsed_args)

        _outputs = [_outputs]

        _output_serializers = [
            _serialize_json,

        ]

        import os
        for idx, output_file in enumerate(_output_files):
            try:
                os.makedirs(os.path.dirname(output_file))
            except OSError:
                pass
            with open(output_file, 'w') as f:
                f.write(_output_serializers[idx](_outputs[idx]))
      image: python:3.7
    inputs:
      parameters:
      - {name: param}
    outputs:
      parameters:
      - name: list-func-Output
        valueFrom: {path: /tmp/outputs/Output/data}
      artifacts:
      - {name: list-func-Output, path: /tmp/outputs/Output/data}
    metadata:
      labels:
        pipelines.kubeflow.org/kfp_sdk_version: 1.8.11
        pipelines.kubeflow.org/pipeline-sdk-type: kfp
        pipelines.kubeflow.org/enable_caching: "true"
      annotations: {pipelines.kubeflow.org/component_spec: '{"implementation": {"container":
          {"args": ["--param", {"inputValue": "param"}, "----output-paths", {"outputPath":
          "Output"}], "command": ["sh", "-ec", "program_path=$(mktemp)\nprintf \"%s\"
          \"$0\" > \"$program_path\"\npython3 -u \"$program_path\" \"$@\"\n", "def
          list_func(param):\n  return list(range(param))\n\ndef _serialize_json(obj)
          -> str:\n    if isinstance(obj, str):\n        return obj\n    import json\n\n    def
          default_serializer(obj):\n        if hasattr(obj, ''to_struct''):\n            return
          obj.to_struct()\n        else:\n            raise TypeError(\n                \"Object
          of type ''%s'' is not JSON serializable and does not have .to_struct() method.\"\n                %
          obj.__class__.__name__)\n\n    return json.dumps(obj, default=default_serializer,
          sort_keys=True)\n\nimport argparse\n_parser = argparse.ArgumentParser(prog=''List
          func'', description='''')\n_parser.add_argument(\"--param\", dest=\"param\",
          type=int, required=True, default=argparse.SUPPRESS)\n_parser.add_argument(\"----output-paths\",
          dest=\"_output_paths\", type=str, nargs=1)\n_parsed_args = vars(_parser.parse_args())\n_output_files
          = _parsed_args.pop(\"_output_paths\", [])\n\n_outputs = list_func(**_parsed_args)\n\n_outputs
          = [_outputs]\n\n_output_serializers = [\n    _serialize_json,\n\n]\n\nimport
          os\nfor idx, output_file in enumerate(_output_files):\n    try:\n        os.makedirs(os.path.dirname(output_file))\n    except
          OSError:\n        pass\n    with open(output_file, ''w'') as f:\n        f.write(_output_serializers[idx](_outputs[idx]))\n"],
          "image": "python:3.7"}}, "inputs": [{"name": "param", "type": "Integer"}],
          "name": "List func", "outputs": [{"name": "Output", "type": "JsonArray"}]}',
        pipelines.kubeflow.org/component_ref: '{}', pipelines.kubeflow.org/arguments.parameters: '{"param":
          "{{inputs.parameters.param}}"}'}
  - name: pipeline
    inputs:
      parameters:
      - {name: param}
    dag:
      tasks:
      - name: for-loop-1
        template: for-loop-1
        dependencies: [list-func]
        arguments:
          parameters:
          - {name: list-func-Output-loop-item, value: '{{item}}'}
        withParam: '{{tasks.list-func.outputs.parameters.list-func-Output}}'
      - name: list-func
        template: list-func
        arguments:
          parameters:
          - {name: param, value: '{{inputs.parameters.param}}'}
  - name: print-func
    container:
      args: [--param, '{{inputs.parameters.list-func-Output-loop-item}}']
      command:
      - sh
      - -ec
      - |
        program_path=$(mktemp)
        printf "%s" "$0" > "$program_path"
        python3 -u "$program_path" "$@"
      - |
        def print_func(param):
          print(str(param))

        import argparse
        _parser = argparse.ArgumentParser(prog='Print func', description='')
        _parser.add_argument("--param", dest="param", type=int, required=True, default=argparse.SUPPRESS)
        _parsed_args = vars(_parser.parse_args())

        _outputs = print_func(**_parsed_args)
      image: python:3.7
    inputs:
      parameters:
      - {name: list-func-Output-loop-item}
    metadata:
      labels:
        pipelines.kubeflow.org/kfp_sdk_version: 1.8.11
        pipelines.kubeflow.org/pipeline-sdk-type: kfp
        pipelines.kubeflow.org/enable_caching: "true"
      annotations: {pipelines.kubeflow.org/component_spec: '{"implementation": {"container":
          {"args": ["--param", {"inputValue": "param"}], "command": ["sh", "-ec",
          "program_path=$(mktemp)\nprintf \"%s\" \"$0\" > \"$program_path\"\npython3
          -u \"$program_path\" \"$@\"\n", "def print_func(param):\n  print(str(param))\n\nimport
          argparse\n_parser = argparse.ArgumentParser(prog=''Print func'', description='''')\n_parser.add_argument(\"--param\",
          dest=\"param\", type=int, required=True, default=argparse.SUPPRESS)\n_parsed_args
          = vars(_parser.parse_args())\n\n_outputs = print_func(**_parsed_args)\n"],
          "image": "python:3.7"}}, "inputs": [{"name": "param", "type": "Integer"}],
          "name": "Print func"}', pipelines.kubeflow.org/component_ref: '{}', pipelines.kubeflow.org/arguments.parameters: '{"param":
          "{{inputs.parameters.list-func-Output-loop-item}}"}'}
  arguments:
    parameters:
    - {name: param}

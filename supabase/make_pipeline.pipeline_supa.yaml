apiVersion: argoproj.io/v1alpha1
kind: Workflow
metadata:
  generateName: data-in-and-out-test-on-kubeflow-
  annotations: {pipelines.kubeflow.org/kfp_sdk_version: 1.8.11, pipelines.kubeflow.org/pipeline_compilation_time: '2022-02-07T19:59:06.009052',
    pipelines.kubeflow.org/pipeline_spec: '{"description": "A demo pipeline for receiving
      and sending dataset on Kubeflow.", "inputs": [{"name": "link", "type": "String"}],
      "name": "data in and out test on Kubeflow"}'}
  labels: {pipelines.kubeflow.org/kfp_sdk_version: 1.8.11}
spec:
  entrypoint: data-in-and-out-test-on-kubeflow
  templates:
  - name: data-in-and-out-test-on-kubeflow
    inputs:
      parameters:
      - {name: link}
    dag:
      tasks:
      - name: data-process
        template: data-process
        arguments:
          parameters:
          - {name: link, value: '{{inputs.parameters.link}}'}
  - name: data-process
    container:
      args: [--link, '{{inputs.parameters.link}}']
      command:
      - sh
      - -ec
      - |
        program_path=$(mktemp)
        printf "%s" "$0" > "$program_path"
        python3 -u "$program_path" "$@"
      - "def data_process(link):\n    '''Print the original dataset'''\n    import\
        \ pandas as pd\n    import numpy as np\n    from mega import Mega\n    df=pd.read_csv(link)\n\
        \    print(df.to_string()) \n\n    #add a new column with random integers\n\
        \    df['NewNumCol'] = np.random.choice([1, 9, 20], df.shape[0])\n    print(df.to_string())\
        \ \n    '''Print the modified dataset'''\n    #send to mega\n    mega = Mega()\n\
        \    email='shifat@betterdata.ai'\n    password='shadia1afshan2raisha3'\n\
        \    m = mega.login(email, password)\n    df.to_csv('salary_modified.csv')\n\
        \    file_name='salary_modified.csv'\n    # upload dataset\n    m.upload(file_name)\n\
        \nimport argparse\n_parser = argparse.ArgumentParser(prog='Data process',\
        \ description='Print the original dataset')\n_parser.add_argument(\"--link\"\
        , dest=\"link\", type=str, required=True, default=argparse.SUPPRESS)\n_parsed_args\
        \ = vars(_parser.parse_args())\n\n_outputs = data_process(**_parsed_args)\n"
      image: python:3.7
    inputs:
      parameters:
      - {name: link}
    metadata:
      labels:
        pipelines.kubeflow.org/kfp_sdk_version: 1.8.11
        pipelines.kubeflow.org/pipeline-sdk-type: kfp
        pipelines.kubeflow.org/enable_caching: "true"
      annotations: {pipelines.kubeflow.org/component_spec: '{"description": "Print
          the original dataset", "implementation": {"container": {"args": ["--link",
          {"inputValue": "link"}], "command": ["sh", "-ec", "program_path=$(mktemp)\nprintf
          \"%s\" \"$0\" > \"$program_path\"\npython3 -u \"$program_path\" \"$@\"\n",
          "def data_process(link):\n    ''''''Print the original dataset''''''\n    import
          pandas as pd\n    import numpy as np\n    from mega import Mega\n    df=pd.read_csv(link)\n    print(df.to_string())
          \n\n    #add a new column with random integers\n    df[''NewNumCol''] =
          np.random.choice([1, 9, 20], df.shape[0])\n    print(df.to_string()) \n    ''''''Print
          the modified dataset''''''\n    #send to mega\n    mega = Mega()\n    email=''shifat@betterdata.ai''\n    password=''shadia1afshan2raisha3''\n    m
          = mega.login(email, password)\n    df.to_csv(''salary_modified.csv'')\n    file_name=''salary_modified.csv''\n    #
          upload dataset\n    m.upload(file_name)\n\nimport argparse\n_parser = argparse.ArgumentParser(prog=''Data
          process'', description=''Print the original dataset'')\n_parser.add_argument(\"--link\",
          dest=\"link\", type=str, required=True, default=argparse.SUPPRESS)\n_parsed_args
          = vars(_parser.parse_args())\n\n_outputs = data_process(**_parsed_args)\n"],
          "image": "python:3.7"}}, "inputs": [{"name": "link", "type": "String"}],
          "name": "Data process"}', pipelines.kubeflow.org/component_ref: '{}', pipelines.kubeflow.org/arguments.parameters: '{"link":
          "{{inputs.parameters.link}}"}'}
  arguments:
    parameters:
    - {name: link}
  serviceAccountName: pipeline-runner
